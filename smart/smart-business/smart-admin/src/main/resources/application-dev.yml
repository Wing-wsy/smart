spring:
  output:
    ansi:
      enabled: always
  datasource:
#    url: jdbc:mysql://47.76.68.216:3306/redpig_master?useUnicode=true&characterEncoding=utf-8
    url: jdbc:mysql://47.76.68.216:3306/smart?useUnicode=true&characterEncoding=utf-8
    username: root
    password: P@ssw0rd123!
    driver-class-name: com.mysql.cj.jdbc.Driver
  # ============ redis 配置开始 ============
  redis:
    # 本地
    host: 127.0.0.1
    port: 6379
    password:
    # 服务器
#    host: 47.76.68.216
#    port: 6379
#    password: 123456abc
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
        max-wait: 100ms

  # ============ redis 配置结束 ============

  # ============ rabbitmq 配置开始 ============
  rabbitmq:
    host: 47.76.68.216
    port: 5672
    username: guest
    password: guest
    virtual-host: /smart
    # 开启 ConfirmCallback
    publisher-confirm-type: correlated
    # 开启 ReturnsCallback
    publisher-returns: true
  # ============ rabbitmq 配置结束 ============

  # ============ kafka 配置开始 ============
  kafka:
    bootstrap-servers: 47.76.68.216:9092
    producer:
      # 发生错误后，消息重发的次数
      retries: 0
      # 当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
      batch-size: 16384
      # 设置生产者内存缓冲区的大小。
      buffer-memory: 33554432
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的 leader节点 收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应
      acks: 1
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      enable-auto-commit: false
      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
      auto-commit-interval: 1S
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
      # 默认的消费组id
      group-id: default-group
      # 键的反序列化方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 值的反序列化方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      # 在侦听器容器中运行的线程数。
      concurrency: 5
      #listner负责ack，每调用一次，就立即commit
      ack-mode: manual_immediate
      missing-topics-fatal: false
  # ============ kafka 配置结束 ============
  # ============ es 配置开始 ============
#  elasticsearch:
#    uris: http://47.76.68.216:9300
#    elasticsearch:
#      cluster-nodes: http://47.76.68.216:9300
#      cluster-name: my-application
#  # ============ es 配置结束 ============

# ============ xxl_job 配置开始 ============
xxl:
  job:
    admin:
      ### xxl-job admin address list, such as "http://address" or "http://address01,http://address02"
      addresses: http://localhost:7071/xxl-job-admin
      jobInfoUri: /jobinfo
      jobGroupUri: /jobgroup
    accessToken: default_token
    executor:
      appname: xxl-job-executor-sample
      ip: 127.0.0.1
      port: 9001
      ### xxl-job executor log-path
      logpath: /Users/wing/architect/XXL_JOB/xxl-job-master/logs
      ### xxl-job executor log-retention-days
      logretentiondays: 30
# ============ xxl_job 配置结束 ============

# ============ 文件服务 配置开始 ============
# 阿里云账号信息不允许配置在这并提交 github，会被检测出来并拦截
# ============ 文件服务 配置结束 ============


#生成的代码存放目录:resources下
filePlace: tmp
#vm模板存放目录
vmPlace: generator

serverPath: http://localhost:8001/
upload: g:/aServer